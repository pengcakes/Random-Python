--------------------------------------
Django
- Open Source Python Web framework
- Node.js but for Python
--------------------------------------
https://docs.djangoproject.com/en/3.1/intro/tutorial01/

MVC Structure (basis of most websites):

1. Model

This part of the website manages the data, logic, and rules of the application.

2. View

This component makes up the UI for the website. Contains HTML, CSS, etc.
Content for the UI comes from the Models.

3. Controller

The middleman. Accepts inputs and converts it into commands for the model or view.


Django Structure:

1. Model

Same as above, under models.py

2. Template

Means Views (from above). UI component. HTML code will be in Template.

3. Views

Refers to the Controller (from above). Figures out which template to display or which "view" to show. Python code will be in views.


What gives w/ the nomenclature? https://docs.djangoproject.com/en/1.11/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names

Also helpful. https://medium.com/@timmykko/a-quick-glance-of-django-for-beginners-688bc6630fab

--------------------------------------
TESTING
--------------------------------------
http://www.rohitschauhan.com/index.php/2018/07/05/python-relative-benefits-of-pytest-unittest-nose-and-doctest/


unittest
- testing framework
- unittest.TestCase is the base class used to create new test cases
- testing makes it easier to improve existing code w/o fucking it up



Nose Tests
- uses unittest (framework that comes installed with python) to make testing easier
- understanding testing is important b/c companies use it and for a reason

PyTest
- alternative to unittest
- seems to have more documentation
-




pip install -e .
python setup.py nosetests
